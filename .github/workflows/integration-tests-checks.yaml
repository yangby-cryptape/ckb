name: Integration Tests Checks

on:
  repository_dispatch:
    types: [ integration-tests-checks ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings

jobs:

  bootstrap:
    name: Bootstrap
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.repos.createCommitStatus({
              state: 'pending',
              owner: context.repo.owner,
              repo: context.repo.repo,
              context: '${{ github.workflow }}',
              sha: '${{ github.event.client_payload.github.sha }}',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

  integration-tests:
    name: Integration Tests
    needs: [ bootstrap ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ github.event.client_payload.env.os_matrix }}
      fail-fast: true
      max-parallel: 10
    env:
      RUST_LOG: info,ckb_test=debug,ckb_sync=debug,ckb_relay=debug,ckb_network=debug
      CKB_TEST_SEC_COEFFICIENT: 5
      CKB_TEST_ARGS: -c 4 --no-report --no-fail-fast
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.github.sha }}
      - if: ${{ runner.os == 'Windows' }}
        id: cache-key
        shell: bash
        run: echo "::set-output name=yyyymm::$(/bin/date -u '+%Y%m')"
      - if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v2
        id: restore-scoop
        with:
          path: ~/scoop
          key: ${{ runner.os }}-scoop-${{ steps.cache-key.outputs.yyyymm }}
      - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
        run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
      - if: ${{ runner.os == 'Windows' }}
        run: |
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - if: ${{ runner.os == 'Windows' }}
        run: |
          scoop install git
          scoop bucket add extras
          scoop install llvm yasm
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ github.event.client_payload.env.rust_toolchain }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
               ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-
               ${{ runner.os }}-cargo-
      - uses: actions/cache@v2
        with:
          path: target/
          key: ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
               ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-
               ${{ runner.os }}-build-
      - uses: actions/cache@v2
        if: ${{ runner.os != 'Windows' }}
        with:
          path: target/release/ckb
          key: ${{ runner.os }}-executable-${{ github.event.client_payload.github.sha }}
      - uses: actions/cache@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          path: target/release/ckb.exe
          key: ${{ runner.os }}-executable-${{ github.event.client_payload.github.sha }}
      - run: |
          make submodule-init
          make setup-ckb-test
      - if: ${{ runner.os != 'Windows' }}
        run: |
          cd test
          cargo run -- --bin target/release/ckb --log-file target/integration.log ${{ env.CKB_TEST_ARGS }}
      - if: ${{ runner.os == 'Windows' }}
        run: |
          cd test
          cargo run -- --bin target/release/ckb.exe --log-file target/integration.log ${{ env.CKB_TEST_ARGS }}
      - uses: actions/upload-artifact@v2
        with:
          name: Integration Logs (${{ runner.os }}, ${{ matrix.os }})
          path: target/integration.log
          if-no-files-found: error

  finally:
    name: Finally
    needs: [ integration-tests ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - if: contains(join(needs.*.result, ';'), 'failure') || contains(join(needs.*.result, ';'), 'cancelled')
        run: exit 1
      - uses: actions/github-script@v4
        if: ${{ always() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.repos.createCommitStatus({
              state: '${{ job.status }}',
              owner: context.repo.owner,
              repo: context.repo.repo,
              context: '${{ github.workflow }}',
              sha: '${{ github.event.client_payload.github.sha }}',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
